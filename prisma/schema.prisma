// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  username  String    @unique
  password  String
  products  Product[]
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  name        String   @db.VarChar(255)
  belongsToId String
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  updates     Update[]

  @@unique([id, belongsToId]) //give something an id and a belongsToId association
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
}

model Update {
  id        String   @id @default(uuid()) //auto generates a unique id with the uuid function
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt() //auto updates to time of update

  title   String
  body    String
  status  UPDATE_STATUS @default(IN_PROGRESS)
  version String?
  asset   String?

  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  // relationship with the Product model -> productID references the id of the product
  updatePoints UpdatePoint[]
}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name        String @db.VarChar(255)
  description String

  updateId String
  update   Update @relation(fields: [updateId], references: [id])
}

//MIGRATION teach your database what the shape of the data looks like - run a migration , 
// also if you already have a shape and need to make a 'breaking change' you would need a migration
// moving the data out then back in with the new stuff PAINFUL, but using prisma is easier to do them
